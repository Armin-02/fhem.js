{
  "name": "fhem.js",
  "version": "2.0.4",
  "description": "This is a node.js server for fhem (home automation). It allows clients connecting to fhem by websockets. ",
  "main": "server.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "forever": ">=0.15.1",
    "socket.io": ">=1.3.0",
    "socketio-auth": ">=0.0.4"
  },
  "bin": {
    "fhem.js": "./bin/fhem.js"
  },
  "scripts": {
    "start": "node server.js",
    "postinstall": "./bin/postinstall.sh"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/winne27/fhem.js.git"
  },
  "keywords": [
    "fhem",
    "node.js",
    "websockets"
  ],
  "author": {
    "name": "Werner Sch√§ffer",
    "email": "werner@schaeffer.net",
    "url": "https://wernerschaeffer.de"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/winne27/fhem.js/issues"
  },
  "homepage": "https://github.com/winne27/fhem.js#readme",
  "readme": "# Purpose\r\n\r\nThis is a node.js server which works as a websocket gateway to a [fhem](http://fhem.de) (home automation) server.\r\nClients can use socket.io in Javascript and Java to establish a websocket connection to fhem.\r\n\r\nIt is possible to subscribe for updates of fhem resource stati like on/off or temperature.\r\nThe websocket connection will deliver this values just in time. Furthermore fhem commands could be send other this connection.\r\n\r\n# Install\r\n\r\nInstall first node.js on the server on which fhem is installed. \r\nEnsure that telnet is enabled on the standard fhem server.\r\n\r\nInstall node.js plugin socket.io with\r\n\r\n    npm install -g socket.io\r\n\r\nCopy this package to a directory of your choice (e.g. /var/www/fhem.js).\r\nHave a look to param.js of this package. Adjust telnet port of fhem if neccessary.\r\nChange to installation directory and start the server with\r\n\r\n    node.js start server.js\r\n\r\n# Operation breakdown\r\n\r\nThe fhem.js server establishes a permanent telnet connection to the standard fhem server and requests information for all changed values (command: inform on). It also forwards commands and responses between clients and the fhem server.\r\n\r\nCommunication to clients with websockets were realized by the socket.io package.\r\n\r\n# Customize\r\n\r\nAdjust in params.js telnet port of fhem.pl server and port on which this server (fhem.js) is reachable.\r\n\r\nThe fhem.pl server must be on the same server and the telnet must be configured without local password.\r\n\r\nTo secure the connection to this node.js server with SSL set\r\n\r\n    exports.useSSL = true;\r\n    exports.sslcert =\r\n    {\r\n        key:    '/etc/ssl/private/bundle/ssl.key',\r\n        cert:   '/etc/ssl/private/bundle/allcert.pem'\r\n    }\r\n\r\n# Client\r\n\r\nOn client side you need socket.io (tested with different browsers and with Android Java using java class [com.github.nkzawa.socketio.client](https://github.com/nkzawa/socket.io-client.java) for realizing a websocket connection.).\r\n\r\nEstablish connection to node.js server by:\r\n\r\n     socket = IO.socket(url, options);        \r\n     socket.connect();\r\n\r\n**On client you can emit the following async requests (fast response with minimized data):**\r\n\r\n  * 'getValueOnce'         : requests a value from fhem once\r\n  * 'getValueOnChange'     : subscribes delivery of a single updated value by a websocket connection\r\n  * 'getAllValuesOnChange' : subscribes delivery of all updated values by a websocket connection\r\n\r\n**On client you can emit the following async requests (slower response with much more data):**\r\n\r\n  * 'getDeviceOnChange'     : subscribes delivery of a single updated device in JsonList2 format\r\n  * 'getAllDevicesOnChange' : subscribes delivery of all updated devices in JsonList2 format\r\n\r\nExample:\r\n\r\n    socket.emit('getValueOnChange','fhem-device-name'); \r\n\r\nFor catching the response define a listener with label 'value' in the first case and label 'device' in the second case.\r\n\r\nJava example:\r\n\r\n    socket.on(\"value\", new Emitter.Listener()\r\n    {\r\n        @Override\r\n        public void call(Object... args)\r\n        {\r\n            Log.i(\"get value\", args[0].toString());\r\n            JSONObject obj = (JSONObject) args[0];\r\n            Iterator<String> iterator = obj.keys();\r\n            String unit = null;\r\n            while (iterator.hasNext())\r\n            {\r\n               unit = (String) iterator.next();\r\n               value = obj.getString(unit);\r\n            }\r\n        }\r\n    }\r\n      \r\nJavascript example:\r\n\r\n    socket.on('value',function(data)\r\n    {\r\n        for (unit in data)\r\n        {\r\n           var value = data[unit];\r\n        }\r\n    });\r\n\r\n**On client you can emit the following sync requests:**\r\n  * 'command',cmd      : send a fhem command like \"list xyz\". Response is send back as ack response\r\n  * 'commandNoResp',cmd: send a fhem command like \"set xyz off\". No response of this command is send back\r\n  * 'getAllSwitches'   : returns JSON array with all devices which have state on, off or toggle\r\n  * 'getAllValues'     : returns JSON array with all devices and their state\r\n  * 'getAllUnitsOf'    : returns JSON array with all devices of type, there type is a argument\r\n  * 'JsonList2',cmd    : returns response from JsonList2 as JSON object     \r\n\r\nJava example for getAllSwitches:\r\n\r\n    mySocket.socket.emit(\"getAllSwitches\", new Ack()\r\n    {\r\n        @Override\r\n        public void call(Object... args)\r\n        {\r\n            JSONArray JSONswitches = (JSONArray) args[0];\r\n            for (int i = 0, size = JSONswitches.length(); i < size; i++)\r\n            {\r\n                String device = JSONswitches.getString(i);\r\n            }\r\n        }\r\n    });\r\n\r\nJava example for getAllUnitsOf (with \"LightScene\" as argument type):\r\n\r\n    mySocket.socket.emit(\"getAllUnitsOf\", \"LightScene\", new Ack()\r\n    {\r\n        @Override\r\n        public void call(Object... args)\r\n        {\r\n            JSONArray JSONlightscenes = (JSONArray) args[0];\r\n            try\r\n            {\r\n                for (int i = 0, size = JSONlightscenes.length(); i < size; i++)\r\n                {\r\n                    String unit = JSONlightscenes.getString(i);\r\n                }\r\n            }\r\n        }\r\n    });\r\n   \r\n   Javascript example:\r\n\r\n    socket.emit(\"getAllUnitsOf\", \"LightScene\", function(data)\r\n    {\r\n        for (unit in data)\r\n        {\r\n           var value = data[unit];\r\n        }\r\n    });\r\n\r\n# Example\r\n\r\nThe folder \"test\" contains a html/javascript example for an client program.\r\n\r\n# Start as service\r\n\r\nFor starting fhem.js server as service using forever is recommended. Install it with:\r\n\r\n    npm install -g forever\r\n\r\nIn the folder /etc/init.d is an example for a start/stop script using forever.\r\n",
  "readmeFilename": "README.md",
  "gitHead": "7630bf9d4f6fa58f9f2b9b82e117eddbaa9d0386",
  "_id": "fhem.js@2.0.3",
  "_shasum": "61ee7128eb67620ba617bf91f2a2602912d733ae",
  "_from": "fhem.js@2.0.3"
}

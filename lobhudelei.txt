[list][b]Software:[/b]

[url=https://github.com/winne27/fhem.js]https://github.com/winne27/fhem.js[/url]

[b]Technik:[/b]

[list]
[li]dies ist ein node.js Server (ab jetzt genannt fhem.js[/li]
[li]ein klassischer fhem Server ist Voraussetzung (ab jetzt genannt fhem.pl)[/li]

[li]fhem.js muss auf demselben Server wie fhem.pl laufen (z.Z)[/li]

[li]fhem.js kommuniziert über telnet mit fhem.pl (z.Z: ohne Passwort)[/li]

[li]fhem.js puffert alle Messwerte des fhem.pl Servers und schickt bei Änderung des Messwertes, [b]und nur dann[/b], eine Nachricht an alle angeschlossenen Clients die diesen Wert adoptiert haben[/li]
[/list]

[b]Warum diese Lösung?[/b]

[list]
[li]Beobachtung: die websocket Integration in fhem stockt scheinbar (keine neuen Beiträge, [b]tote[/b] Links)[/li]
[li]Vorlieben: ich kenne Perl, aber ich kann Javascript[/li]
[li]Feststellung: node.js wurde konzipiert um websockets abzuwickeln - Perl, aber auch PHP und Andere, integrieren dieses Konzept irgendwie[/li]
[li]Erfahrung: sowohl in Browsern als auch in Apps lassen sich problemlos Verbindungen zu node.js Servern aufbauen[/li]
[/list]

[b]Warum überhaupt websockets[/b]

Sarkastisch: um den websockets Propheten endlich mal ein Beispiel abseits der "Chatroom-Beispiele" zu liefern.
Euphorisch: um altuelle Messwerte, egal ob die Zimmertemperatur in der Eckkammer oder die Strärke des Sonnenwindes, auf einer Website oder in einer App aktuell darzustellen, sind websockets eine wahre enbarung 